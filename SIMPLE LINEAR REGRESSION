{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv(\"C:\\\\Users\\\\channu\\\\Downloads\\\\delivery_time.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery Time  Sorting Time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "B=data.rename(columns={\"Sorting Time\":'Sorting_Time' ,\"Delivery Time\":'Delivery_Time'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_Time</th>\n",
       "      <th>Sorting_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15.35</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17.90</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18.75</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>19.83</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10.75</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16.68</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12.03</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>14.88</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.11</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>17.83</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.50</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Delivery_Time  Sorting_Time\n",
       "0           21.00            10\n",
       "1           13.50             4\n",
       "2           19.75             6\n",
       "3           24.00             9\n",
       "4           29.00            10\n",
       "5           15.35             6\n",
       "6           19.00             7\n",
       "7            9.50             3\n",
       "8           17.90            10\n",
       "9           18.75             9\n",
       "10          19.83             8\n",
       "11          10.75             4\n",
       "12          16.68             7\n",
       "13          11.50             3\n",
       "14          12.03             3\n",
       "15          14.88             4\n",
       "16          13.75             6\n",
       "17          18.11             7\n",
       "18           8.00             2\n",
       "19          17.83             7\n",
       "20          21.50             5"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery Time  Sorting Time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_Time</th>\n",
       "      <th>Sorting_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Delivery_Time</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.825997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sorting_Time</th>\n",
       "      <td>0.825997</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Delivery_Time  Sorting_Time\n",
       "Delivery_Time       1.000000      0.825997\n",
       "Sorting_Time        0.825997      1.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\channu\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sorting_Time', ylabel='Density'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(B['Sorting_Time'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "ss=StandardScaler().fit_transform(B.values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\channu\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Delivery_Time', ylabel='Density'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(B[\"Delivery_Time\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "model=smf.ols(\"Delivery_Time~Sorting_Time\" , data=B).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Delivery_Time</td>  <th>  R-squared:         </th> <td>   0.682</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.666</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   40.80</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 14 Mar 2021</td> <th>  Prob (F-statistic):</th> <td>3.98e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>15:01:08</td>     <th>  Log-Likelihood:    </th> <td> -51.357</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   106.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   108.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td>    6.5827</td> <td>    1.722</td> <td>    3.823</td> <td> 0.001</td> <td>    2.979</td> <td>   10.186</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting_Time</th> <td>    1.6490</td> <td>    0.258</td> <td>    6.387</td> <td> 0.000</td> <td>    1.109</td> <td>    2.189</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 3.649</td> <th>  Durbin-Watson:     </th> <td>   1.248</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.161</td> <th>  Jarque-Bera (JB):  </th> <td>   2.086</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.750</td> <th>  Prob(JB):          </th> <td>   0.352</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.367</td> <th>  Cond. No.          </th> <td>    18.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Delivery_Time   R-squared:                       0.682\n",
       "Model:                            OLS   Adj. R-squared:                  0.666\n",
       "Method:                 Least Squares   F-statistic:                     40.80\n",
       "Date:                Sun, 14 Mar 2021   Prob (F-statistic):           3.98e-06\n",
       "Time:                        15:01:08   Log-Likelihood:                -51.357\n",
       "No. Observations:                  21   AIC:                             106.7\n",
       "Df Residuals:                      19   BIC:                             108.8\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept        6.5827      1.722      3.823      0.001       2.979      10.186\n",
       "Sorting_Time     1.6490      0.258      6.387      0.000       1.109       2.189\n",
       "==============================================================================\n",
       "Omnibus:                        3.649   Durbin-Watson:                   1.248\n",
       "Prob(Omnibus):                  0.161   Jarque-Bera (JB):                2.086\n",
       "Skew:                           0.750   Prob(JB):                        0.352\n",
       "Kurtosis:                       3.367   Cond. No.                         18.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Intercept       0.001147\n",
       " Sorting_Time    0.000004\n",
       " dtype: float64,\n",
       " Intercept       3.823349\n",
       " Sorting_Time    6.387447\n",
       " dtype: float64)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.pvalues , model.tvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'regression plot')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x='Delivery_Time' , y='Sorting_Time' ,data=B ,color='pink')\n",
    "plt.title('regression plot')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Delivery_Time</td>  <th>  R-squared:         </th> <td>   0.682</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.666</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   40.80</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 14 Mar 2021</td> <th>  Prob (F-statistic):</th> <td>3.98e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>15:01:09</td>     <th>  Log-Likelihood:    </th> <td> -51.357</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   106.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   108.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td>    6.5827</td> <td>    1.722</td> <td>    3.823</td> <td> 0.001</td> <td>    2.979</td> <td>   10.186</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting_Time</th> <td>    1.6490</td> <td>    0.258</td> <td>    6.387</td> <td> 0.000</td> <td>    1.109</td> <td>    2.189</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 3.649</td> <th>  Durbin-Watson:     </th> <td>   1.248</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.161</td> <th>  Jarque-Bera (JB):  </th> <td>   2.086</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.750</td> <th>  Prob(JB):          </th> <td>   0.352</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.367</td> <th>  Cond. No.          </th> <td>    18.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Delivery_Time   R-squared:                       0.682\n",
       "Model:                            OLS   Adj. R-squared:                  0.666\n",
       "Method:                 Least Squares   F-statistic:                     40.80\n",
       "Date:                Sun, 14 Mar 2021   Prob (F-statistic):           3.98e-06\n",
       "Time:                        15:01:09   Log-Likelihood:                -51.357\n",
       "No. Observations:                  21   AIC:                             106.7\n",
       "Df Residuals:                      19   BIC:                             108.8\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept        6.5827      1.722      3.823      0.001       2.979      10.186\n",
       "Sorting_Time     1.6490      0.258      6.387      0.000       1.109       2.189\n",
       "==============================================================================\n",
       "Omnibus:                        3.649   Durbin-Watson:                   1.248\n",
       "Prob(Omnibus):                  0.161   Jarque-Bera (JB):                2.086\n",
       "Skew:                           0.750   Prob(JB):                        0.352\n",
       "Kurtosis:                       3.367   Cond. No.                         18.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept       6.582734\n",
       "Sorting_Time    1.649020\n",
       "dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6822714748417231, 106.71400170798609)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.rsquared,model.aic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import statsmodels.api as sn\n",
    "import matplotlib.pyplot as plt\n",
    "qqplot=sn.qqplot(model.resid,line=\"q\")\n",
    "plt.title(\"normal qqplot for residuals\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig =plt.figure(figsize=(15,10))\n",
    "fig=sn.graphics.plot_regress_exog(model,'Sorting_Time', fig=fig)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_influence=model.get_influence()\n",
    "(c,x)=model_influence.cooks_distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=plt.subplots(figsize =(20,7))\n",
    "plt.stem(np.arange(len(B)) ,np.round(c,3))\n",
    "plt.xlabel('row index')\n",
    "plt.ylabel('cooks distance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 0.4620530412650316)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(np.argmax(c) , np.max(c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.graphics.regressionplots import influence_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "influence_plot(model)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = B.shape[1]\n",
    "n = B.shape[0]\n",
    "leverage_cutoff = 3*((k+1)/n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 21, 0.42857142857142855)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k,n,leverage_cutoff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_Time</th>\n",
       "      <th>Sorting_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17.90</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18.75</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.50</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Delivery_Time  Sorting_Time\n",
       "4           29.00            10\n",
       "8           17.90            10\n",
       "9           18.75             9\n",
       "20          21.50             5"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B[B.index.isin([4,8,9,20])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_Time</th>\n",
       "      <th>Sorting_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery_Time  Sorting_Time\n",
       "0          21.00            10\n",
       "1          13.50             4\n",
       "2          19.75             6\n",
       "3          24.00             9\n",
       "4          29.00            10"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "B_new = pd.read_csv(\"C:\\\\Users\\\\channu\\\\Downloads\\\\delivery_time.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "c_new =B_new.rename(columns={\"Delivery Time\":'Delivery_Time' , \"Sorting Time\":\"Sorting_Time\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "B1 = c_new.drop(B_new.index[[4,8,20]] ,axis=0).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery_Time</th>\n",
       "      <th>Sorting_Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15.35</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>18.75</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>19.83</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10.75</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>16.68</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12.03</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14.88</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>13.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>18.11</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>8.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17.83</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Delivery_Time  Sorting_Time\n",
       "0           21.00            10\n",
       "1           13.50             4\n",
       "2           19.75             6\n",
       "3           24.00             9\n",
       "4           15.35             6\n",
       "5           19.00             7\n",
       "6            9.50             3\n",
       "7           18.75             9\n",
       "8           19.83             8\n",
       "9           10.75             4\n",
       "10          16.68             7\n",
       "11          11.50             3\n",
       "12          12.03             3\n",
       "13          14.88             4\n",
       "14          13.75             6\n",
       "15          18.11             7\n",
       "16           8.00             2\n",
       "17          17.83             7"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B1 = B1.drop(['index'] , axis=1)\n",
    "B1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_model=smf.ols(\"Delivery_Time~Sorting_Time\" , data=B1).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8332330202945817, 74.89939393823053)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model.rsquared , final_model.aic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8332330202945817"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model.rsquared "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    14.394381\n",
       "1    16.068457\n",
       "2    17.742533\n",
       "3    19.416609\n",
       "4    21.090685\n",
       "dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testdata=pd.Series([5,6,7,8,9])\n",
    "final_data_pred=pd.DataFrame(testdata,columns=['Sorting_Time'])\n",
    "final_model.predict(final_data_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8332330202945817"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model.rsquared"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 nd question salary hike"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.formula.api as smf\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.graphics.regressionplots import influence_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv(\"C:\\\\Users\\\\channu\\\\Downloads\\\\Salary_Data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary\n",
       "0              1.1  39343.0\n",
       "1              1.3  46205.0\n",
       "2              1.5  37731.0\n",
       "3              2.0  43525.0\n",
       "4              2.2  39891.0"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>YearsExperience</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.978242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Salary</th>\n",
       "      <td>0.978242</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 YearsExperience    Salary\n",
       "YearsExperience         1.000000  0.978242\n",
       "Salary                  0.978242  1.000000"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\channu\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='YearsExperience', ylabel='Density'>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data['YearsExperience'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    " model=smf.ols(\"Salary~YearsExperience\" , data=data).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='YearsExperience', ylabel='Salary'>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x='YearsExperience' , y='Salary' , data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept          25792.200199\n",
       "YearsExperience     9449.962321\n",
       "dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept          5.511950e-12\n",
       "YearsExperience    1.143068e-20\n",
       "dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.pvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept          11.346940\n",
       "YearsExperience    24.950094\n",
       "dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.tvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>Salary</td>      <th>  R-squared:         </th> <td>   0.957</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.955</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   622.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 14 Mar 2021</td> <th>  Prob (F-statistic):</th> <td>1.14e-20</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>15:01:16</td>     <th>  Log-Likelihood:    </th> <td> -301.44</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>   606.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    28</td>      <th>  BIC:               </th> <td>   609.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td> 2.579e+04</td> <td> 2273.053</td> <td>   11.347</td> <td> 0.000</td> <td> 2.11e+04</td> <td> 3.04e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>YearsExperience</th> <td> 9449.9623</td> <td>  378.755</td> <td>   24.950</td> <td> 0.000</td> <td> 8674.119</td> <td> 1.02e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.140</td> <th>  Durbin-Watson:     </th> <td>   1.648</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.343</td> <th>  Jarque-Bera (JB):  </th> <td>   1.569</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.363</td> <th>  Prob(JB):          </th> <td>   0.456</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.147</td> <th>  Cond. No.          </th> <td>    13.2</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 Salary   R-squared:                       0.957\n",
       "Model:                            OLS   Adj. R-squared:                  0.955\n",
       "Method:                 Least Squares   F-statistic:                     622.5\n",
       "Date:                Sun, 14 Mar 2021   Prob (F-statistic):           1.14e-20\n",
       "Time:                        15:01:16   Log-Likelihood:                -301.44\n",
       "No. Observations:                  30   AIC:                             606.9\n",
       "Df Residuals:                      28   BIC:                             609.7\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===================================================================================\n",
       "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------\n",
       "Intercept        2.579e+04   2273.053     11.347      0.000    2.11e+04    3.04e+04\n",
       "YearsExperience  9449.9623    378.755     24.950      0.000    8674.119    1.02e+04\n",
       "==============================================================================\n",
       "Omnibus:                        2.140   Durbin-Watson:                   1.648\n",
       "Prob(Omnibus):                  0.343   Jarque-Bera (JB):                1.569\n",
       "Skew:                           0.363   Prob(JB):                        0.456\n",
       "Kurtosis:                       2.147   Cond. No.                         13.2\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9569566641435086"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.rsquared"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "manual check:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "salary = b0+b1 yearsexperience\n",
    "*salary=25792.20+9949.96*5\n",
    "       =73041.99r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    73042.011806\n",
       "dtype: float64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new = pd.Series([5])\n",
    "data_prediction = pd.DataFrame(data_new,columns=['YearsExperience'])\n",
    "model.predict(data_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9569566641435086"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.rsquared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
